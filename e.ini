<script>
  var mapContainer = document.getElementById('map');
  var map = new kakao.maps.Map(mapContainer, { 
    center: new kakao.maps.LatLng(37.5665, 126.9780), 
    level: 3
  });
  var currentMarker = null;
  var destinationMarker = null;
  var routePolyline = null;
  var destinationLatLng = null;
  var waypoints = []; // 전역 웨이포인트 변수
  var geocoder = new kakao.maps.services.Geocoder();
  var ws = null;

  // 현재 위치 업데이트 함수
  function updateLocation(lat, lon) {
    if (!lat || !lon) return;
    var locPosition = new kakao.maps.LatLng(lat, lon);
    console.log("📍 현재 위치 업데이트:", lat, lon);
    if (currentMarker) {
      currentMarker.setPosition(locPosition);
    } else {
      currentMarker = new kakao.maps.Marker({
        position: locPosition,
        map: map,
        title: "현재 위치"
      });
    }
    map.setCenter(locPosition);
    // 목적지가 설정되어 있으면, 로봇 제어용으로 현재 위치와 웨이포인트 정보를 활용할 수 있습니다.
    // 예: 로봇 제어 서버에 현재 위치와 함께 'waypoints' 데이터를 전송하는 로직 추가 가능.
  }

  // 카카오 네비 API로 경로 데이터 가져오기 (한 번만 호출)
  function getRouteData(startPos, endPos) {
    var url = 'https://apis-navi.kakaomobility.com/v1/directions';
    url += '?origin=' + startPos.getLng() + ',' + startPos.getLat();
    url += '&destination=' + endPos.getLng() + ',' + endPos.getLat();
    fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': 'KakaoAK 0a115b0069642fd0547386e225798817'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log("📍 경로 데이터 수신:", data);
      if (!data.routes || data.routes.length === 0) {
        console.error("❌ 경로를 찾을 수 없습니다.");
        return;
      }
      waypoints = [];  // 전역 변수에 저장
      data.routes[0].sections[0].roads.forEach(function(road) {
        road.vertexes.forEach((coord, index) => {
          if (index % 2 === 0) {
            var lat = road.vertexes[index + 1];
            var lng = coord;
            waypoints.push(new kakao.maps.LatLng(lat, lng));
          }
        });
      });
      drawRoute(waypoints);
      // 이제 'waypoints' 배열을 로봇 제어 알고리즘에 활용하거나 서버로 전송할 수 있습니다.
    })
    .catch(error => console.error("❌ 경로 데이터 요청 실패:", error));
  }

  // 폴리라인 그리기 함수
  function drawRoute(coords) {
    if (routePolyline) routePolyline.setMap(null);
    routePolyline = new kakao.maps.Polyline({
      path: coords,
      strokeWeight: 5,
      strokeColor: '#FF0000',
      strokeOpacity: 0.8,
      strokeStyle: 'solid'
    });
    routePolyline.setMap(map);
  }

  // 목적지 검색: 주소 변환 후 경로 요청 (한 번 호출)
  function searchDestination() {
    var address = document.getElementById("destinationInput").value;
    if (!address) {
      alert("목적지 주소를 입력하세요.");
      return;
    }
    geocoder.addressSearch(address, function(result, status) {
      if (status === kakao.maps.services.Status.OK) {
        destinationLatLng = new kakao.maps.LatLng(result[0].y, result[0].x);
        if (destinationMarker) destinationMarker.setMap(null);
        destinationMarker = new kakao.maps.Marker({ 
          position: destinationLatLng, 
          map: map, 
          title: "목적지" 
        });
        if (currentMarker) {
          // 현재 위치와 목적지가 모두 정해졌으면, 경로를 한 번 요청
          getRouteData(currentMarker.getPosition(), destinationLatLng);
        }
      } else {
        alert("❌ 주소 변환 실패. 정확한 주소를 입력하세요.");
      }
    });
  }

  // WebSocket 연결 및 GPS 데이터 수신
  function connectWebSocket() {
    ws = new WebSocket("ws://localhost:8765");
    ws.onopen = function () {
      console.log("✅ WebSocket 연결 성공!");
    };
    ws.onmessage = function (event) {
      try {
        var data = JSON.parse(event.data);
        if (data.latitude && data.longitude) {
          updateLocation(data.latitude, data.longitude);
        } else {
          console.warn("⚠ GPS 데이터가 올바르지 않습니다:", data);
        }
      } catch (error) {
        console.error("❌ GPS 데이터 파싱 오류:", error);
      }
    };
    ws.onerror = function (error) {
      console.error("❌ WebSocket 오류:", error);
    };
    ws.onclose = function () {
      console.warn("⚠ WebSocket 연결 종료됨. 5초 후 재연결 시도...");
      setTimeout(connectWebSocket, 5000);
    };
  }
  connectWebSocket();
</script>
